/**
* Api Documentation
* Api Documentation
*
* OpenAPI spec version: 1.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package com.kodfarki.subscreasy.client

import com.kodfarki.subscreasy.client.model.Authorization
import com.kodfarki.subscreasy.client.model.AuthorizedServicesResponse
import com.kodfarki.subscreasy.client.model.ChargingLog
import com.kodfarki.subscreasy.client.model.Deduction
import com.kodfarki.subscreasy.client.model.DeductionResult
import com.kodfarki.subscreasy.client.model.InvoiceRequest
import com.kodfarki.subscreasy.client.model.MessageTemplate
import com.kodfarki.subscreasy.client.model.ServiceInstanceResult
import com.kodfarki.subscreasy.client.model.ServiceOfferingResult

import io.swagger.client.infrastructure.*

class EndpointsApi(basePath: kotlin.String = "https://localhost:8080") : ApiClient(basePath) {

    /**
    * authorize
    * 
    * @param authorization authorization 
    * @return kotlin.Boolean
    */
    @Suppress("UNCHECKED_CAST")
    fun authorizeUsingPUT(authorization: Authorization) : kotlin.Boolean {
        val localVariableBody: kotlin.Any? = authorization
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.PUT,
            "/api/authorize",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Boolean>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Boolean
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * deduct
    * 
    * @param deduction deduction 
    * @return DeductionResult
    */
    @Suppress("UNCHECKED_CAST")
    fun deductUsingPUT(deduction: Deduction) : DeductionResult {
        val localVariableBody: kotlin.Any? = deduction
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.PUT,
            "/api/deduct",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<DeductionResult>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as DeductionResult
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * getAuthorizedServices
    * 
    * @param secureId secureId 
    * @return AuthorizedServicesResponse
    */
    @Suppress("UNCHECKED_CAST")
    fun getAuthorizedServicesUsingGET(secureId: kotlin.String) : AuthorizedServicesResponse {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/api/service/subscriber/{secureId}".replace("{"+"secureId"+"}", "$secureId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<AuthorizedServicesResponse>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as AuthorizedServicesResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * getChargingLogBySubscription
    * 
    * @param id id 
    * @return kotlin.Array<ChargingLog>
    */
    @Suppress("UNCHECKED_CAST")
    fun getChargingLogBySubscriptionUsingGET(id: kotlin.Long) : kotlin.Array<ChargingLog> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/api/charging-logs/subscription/{id}".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ChargingLog>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ChargingLog>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * getCustomerTotalAmount
    * 
    * @param id id 
    * @return kotlin.Long
    */
    @Suppress("UNCHECKED_CAST")
    fun getCustomerTotalAmountUsingGET(id: kotlin.String) : kotlin.Long {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/api/customer-totalAmountCharge/{id}".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Long>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Long
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * getInvoiceDetails
    * 
    * @param invoiceRequest invoiceRequest 
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun getInvoiceDetailsUsingGET(invoiceRequest: InvoiceRequest) : kotlin.Any {
        val localVariableBody: kotlin.Any? = invoiceRequest
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/api/getInvoiceDetails",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * getMessageTemplate
    * 
    * @param lifecycleEventName lifecycleEventName 
    * @return MessageTemplate
    */
    @Suppress("UNCHECKED_CAST")
    fun getMessageTemplateUsingGET(lifecycleEventName: kotlin.String) : MessageTemplate {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/api/message-templates/email/{lifecycleEventName}".replace("{"+"lifecycleEventName"+"}", "$lifecycleEventName"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<MessageTemplate>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as MessageTemplate
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * getServiceInstancesBySubscription
    * 
    * @param id id 
    * @return kotlin.Array<ServiceInstanceResult>
    */
    @Suppress("UNCHECKED_CAST")
    fun getServiceInstancesBySubscriptionUsingGET(id: kotlin.Long) : kotlin.Array<ServiceInstanceResult> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/api/service-instances/subscription/{id}".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceInstanceResult>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceInstanceResult>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * getServiceOfferingsBySubscriptionPlan
    * 
    * @param id id 
    * @return kotlin.Array<ServiceOfferingResult>
    */
    @Suppress("UNCHECKED_CAST")
    fun getServiceOfferingsBySubscriptionPlanUsingGET(id: kotlin.Long) : kotlin.Array<ServiceOfferingResult> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/api/service-offerings/offer/{id}".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceOfferingResult>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceOfferingResult>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * getTotalRevenuePerMonth
    * 
    * @param id id 
    * @return kotlin.Array<kotlin.Any>
    */
    @Suppress("UNCHECKED_CAST")
    fun getTotalRevenuePerMonthUsingGET(id: kotlin.Long) : kotlin.Array<kotlin.Any> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/api/charging-logs-totalamount-customer/{id}".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<kotlin.Any>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<kotlin.Any>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

}
